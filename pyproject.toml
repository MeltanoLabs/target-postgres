[tool.poetry]
name = "meltanolabs-target-postgres"
version = "0.0.0"
description = "`target-postgres` is a Singer target for Postgres, built with the Meltano SDK for Singer Targets."
authors = ["Meltano Team and Contributors <hello@meltano.com>"]
maintainers = ["Meltano Team and Contributors <hello@meltano.com>"]
license = "MIT"
readme = "README.md"
homepage = "https://meltano.com"
repository = "https://github.com/meltanolabs/target-postgres"
keywords = [
    "Postgres",
    "Singer",
    "ELT",
    "Meltano",
    "Meltano SDK",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
]
packages = [
    { include = "target_postgres" }
]

[tool.poetry.dependencies]
python = "<3.13,>=3.8.1"
requests = "^2.25.1"
singer-sdk = ">=0.28,<0.34"
psycopg2-binary = "2.9.9"
sqlalchemy = ">=2.0,<3.0"
sshtunnel = "0.4.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
mypy = "^1.6.1"
remote-pdb="2.1.0"
black = "^23.1.0"
flake8 = "^6.0.0"
isort = "^5.10.1"
tox = "^4"
types-paramiko = "^3.3.0.0"
types-simplejson = "^3.19.0.2"
types-sqlalchemy = "^1.4.53.38"
types-jsonschema = "^4.19.0.3"

[tool.mypy]
exclude = "tests"

[[tool.mypy.overrides]]
module = ["sshtunnel"]
ignore_missing_imports = true

[tool.isort]
profile = "black"
multi_line_output = 3 # Vertical Hanging Indent
src_paths = "target_postgres"

[build-system]
requires = ["poetry-core>=1.0.8", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.scripts]
# CLI declaration
target-postgres = 'target_postgres.target:TargetPostgres.cli'

[tool.pytest.ini_options]
pythonpath = [
  "."
]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "semver"
